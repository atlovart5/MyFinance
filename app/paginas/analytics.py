# finbot_project/app/paginas/analytics.py

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
import numpy as np
from datetime import datetime, timedelta
import json
import os
from pathlib import Path

# --- CORRE√á√ÉO INICIADA ---
# As importa√ß√µes foram separadas. Fun√ß√µes v√™m do backend,
# e o objeto de configura√ß√£o vem de config.py.
from backend import carregar_json, salvar_json
from config import config
# --- CORRE√á√ÉO FINALIZADA ---

def carregar_dados_analytics():
    """Carrega dados para an√°lise avan√ßada."""
    try:
        # --- CORRE√á√ÉO INICIADA ---
        # Acessando a vari√°vel atrav√©s do objeto 'config'
        if not config.ARQUIVO_CONSOLIDADO.exists():
            return pd.DataFrame()
        df = pd.read_csv(str(config.ARQUIVO_CONSOLIDADO), sep=';')
        # --- CORRE√á√ÉO FINALIZADA ---
        df['Data'] = pd.to_datetime(df['Data'])
        return df
    except FileNotFoundError:
        return pd.DataFrame()
    except Exception as e:
        st.error(f"Erro ao carregar dados para analytics: {e}")
        return pd.DataFrame()


def calcular_metricas_financeiras(df):
    """Calcula m√©tricas financeiras avan√ßadas."""
    if df.empty:
        return {}
    
    # Separar receitas e despesas
    receitas = df[df['Tipo'] == 'Receita']['Valor'].sum()
    despesas = abs(df[df['Tipo'] == 'Despesa']['Valor'].sum())
    
    # M√©tricas b√°sicas
    saldo_total = receitas - despesas
    taxa_poupanca = (saldo_total / receitas * 100) if receitas > 0 else 0
    
    # An√°lise por categoria
    gastos_por_categoria = df[df['Tipo'] == 'Despesa'].groupby('Categoria')['Valor'].sum().abs()
    
    # An√°lise temporal
    df['Mes'] = df['Data'].dt.to_period('M')
    gastos_mensais = df[df['Tipo'] == 'Despesa'].groupby('Mes')['Valor'].sum().abs()
    
    # Tend√™ncias
    if len(gastos_mensais) > 1:
        tendencia = np.polyfit(range(len(gastos_mensais)), gastos_mensais.values, 1)[0]
        tendencia_texto = "Crescimento" if tendencia > 0 else "Redu√ß√£o" if tendencia < 0 else "Est√°vel"
    else:
        tendencia_texto = "Insuficiente"
    
    # Anomalias (outliers)
    gastos_por_estabelecimento = df[df['Tipo'] == 'Despesa'].groupby('Estabelecimento')['Valor'].sum().abs()
    q1 = gastos_por_estabelecimento.quantile(0.25)
    q3 = gastos_por_estabelecimento.quantile(0.75)
    iqr = q3 - q1
    outliers = gastos_por_estabelecimento[(gastos_por_estabelecimento < (q1 - 1.5 * iqr)) | 
                                          (gastos_por_estabelecimento > (q3 + 1.5 * iqr))]
    
    return {
        'receitas_total': receitas,
        'despesas_total': despesas,
        'saldo_total': saldo_total,
        'taxa_poupanca': taxa_poupanca,
        'gastos_por_categoria': gastos_por_categoria,
        'gastos_mensais': gastos_mensais,
        'tendencia': tendencia_texto,
        'outliers': outliers,
        'total_transacoes': len(df),
        'periodo_analise': f"{df['Data'].min().strftime('%d/%m/%Y')} - {df['Data'].max().strftime('%d/%m/%Y')}"
    }

def criar_grafico_tendencia(gastos_mensais):
    """Cria gr√°fico de tend√™ncia de gastos."""
    if len(gastos_mensais) < 2:
        return go.Figure()
    
    fig = go.Figure()
    
    # Dados reais
    fig.add_trace(go.Scatter(
        x=gastos_mensais.index.astype(str),
        y=gastos_mensais.values,
        mode='lines+markers',
        name='Gastos Reais',
        line=dict(color='red', width=3)
    ))
    
    # Linha de tend√™ncia
    x_numeric = np.arange(len(gastos_mensais))
    z = np.polyfit(x_numeric, gastos_mensais.values, 1)
    p = np.poly1d(z)
    fig.add_trace(go.Scatter(
        x=gastos_mensais.index.astype(str),
        y=p(x_numeric),
        mode='lines',
        name='Tend√™ncia',
        line=dict(color='blue', width=2, dash='dash')
    ))
    
    fig.update_layout(
        title="Tend√™ncia de Gastos Mensais",
        xaxis_title="M√™s",
        yaxis_title="Gastos (R$)",
        height=400
    )
    
    return fig

def criar_grafico_categoria_tempo(df):
    """Cria gr√°fico de gastos por categoria ao longo do tempo."""
    if df.empty:
        return go.Figure()
    
    # Preparar dados
    df_temp = df[df['Tipo'] == 'Despesa'].copy()
    df_temp['Mes'] = df_temp['Data'].dt.to_period('M')
    
    gastos_categoria_tempo = df_temp.groupby(['Mes', 'Categoria'])['Valor'].sum().abs().reset_index()
    
    # Pivot para formato adequado ao gr√°fico
    pivot_data = gastos_categoria_tempo.pivot(index='Mes', columns='Categoria', values='Valor').fillna(0)
    
    fig = go.Figure()
    
    for categoria in pivot_data.columns:
        fig.add_trace(go.Scatter(
            x=pivot_data.index.astype(str),
            y=pivot_data[categoria],
            mode='lines+markers',
            name=categoria,
            stackgroup='one'
        ))
    
    fig.update_layout(
        title="Evolu√ß√£o dos Gastos por Categoria",
        xaxis_title="M√™s",
        yaxis_title="Gastos (R$)",
        height=400
    )
    
    return fig

def gerar_insights_ai(metricas):
    """Gera insights baseados nas m√©tricas calculadas."""
    insights = []
    
    # An√°lise de taxa de poupan√ßa
    if metricas['taxa_poupanca'] > 20:
        insights.append("üéâ Excelente! Sua taxa de poupan√ßa est√° acima de 20%. Continue assim!")
    elif metricas['taxa_poupanca'] > 10:
        insights.append("üëç Boa! Sua taxa de poupan√ßa est√° saud√°vel. Considere aumentar para 20%.")
    elif metricas['taxa_poupanca'] > 0:
        insights.append("‚ö†Ô∏è Aten√ß√£o! Sua taxa de poupan√ßa est√° baixa. Considere reduzir gastos.")
    else:
        insights.append("üö® Cr√≠tico! Voc√™ est√° gastando mais do que ganha. A√ß√£o imediata necess√°ria.")
    
    # An√°lise de tend√™ncia
    if metricas['tendencia'] == "Crescimento":
        insights.append("üìà Seus gastos est√£o aumentando. Revise suas categorias de maior crescimento.")
    elif metricas['tendencia'] == "Redu√ß√£o":
        insights.append("üìâ √ìtimo! Seus gastos est√£o diminuindo. Continue com essa disciplina!")
    
    # An√°lise de outliers
    if len(metricas['outliers']) > 0:
        insights.append(f"üîç Encontramos {len(metricas['outliers'])} gastos an√¥malos. Revise-os!")
    
    # An√°lise de categorias
    if not metricas['gastos_por_categoria'].empty:
        maior_categoria = metricas['gastos_por_categoria'].idxmax()
        maior_valor = metricas['gastos_por_categoria'].max()
        percentual = (maior_valor / metricas['despesas_total']) * 100
        
        insights.append(f"üí° Sua maior categoria de gasto √© '{maior_categoria}' ({percentual:.1f}% do total).")
    
    return insights

def layout():
    """Renderiza a p√°gina de analytics avan√ßados."""
    st.header("üìä Analytics Avan√ßados")
    st.info("An√°lise profunda dos seus dados financeiros com insights inteligentes.")
    
    # Carregar dados
    df = carregar_dados_analytics()
    
    if df.empty:
        st.warning("Nenhum dado encontrado. Processe os dados na p√°gina 'Processamento' primeiro.")
        return
    
    # Calcular m√©tricas
    metricas = calcular_metricas_financeiras(df)
    
    # Tabs para diferentes an√°lises
    tab1, tab2, tab3, tab4 = st.tabs(["üìà Vis√£o Geral", "üéØ Insights", "üìä Gr√°ficos", "üîç Detalhes"])
    
    with tab1:
        st.subheader("M√©tricas Financeiras")
        
        # Cards de m√©tricas principais
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "Receitas Totais",
                f"R$ {metricas['receitas_total']:,.2f}",
                help="Total de receitas no per√≠odo"
            )
        
        with col2:
            st.metric(
                "Despesas Totais",
                f"R$ {metricas['despesas_total']:,.2f}",
                help="Total de despesas no per√≠odo"
            )
        
        with col3:
            st.metric(
                "Saldo",
                f"R$ {metricas['saldo_total']:,.2f}",
                delta=f"{metricas['saldo_total']:,.2f}",
                delta_color="normal" if metricas['saldo_total'] >= 0 else "inverse"
            )
        
        with col4:
            st.metric(
                "Taxa de Poupan√ßa",
                f"{metricas['taxa_poupanca']:.1f}%",
                help="(Receitas - Despesas) / Receitas"
            )
        
        # Informa√ß√µes adicionais
        st.subheader("Informa√ß√µes do Per√≠odo")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.info(f"**Per√≠odo:** {metricas['periodo_analise']}")
        
        with col2:
            st.info(f"**Total de Transa√ß√µes:** {metricas['total_transacoes']}")
        
        with col3:
            st.info(f"**Tend√™ncia:** {metricas['tendencia']}")
    
    with tab2:
        st.subheader("Insights Inteligentes")
        
        # Gerar insights
        insights = gerar_insights_ai(metricas)
        
        for i, insight in enumerate(insights):
            st.write(f"{i+1}. {insight}")
        
        # An√°lise de categorias
        if not metricas['gastos_por_categoria'].empty:
            st.subheader("Top 5 Categorias de Gasto")
            
            top_categorias = metricas['gastos_por_categoria'].head(5)
            
            for categoria, valor in top_categorias.items():
                percentual = (valor / metricas['despesas_total']) * 100
                st.write(f"‚Ä¢ **{categoria}:** R$ {valor:,.2f} ({percentual:.1f}%)")
    
    with tab3:
        st.subheader("Gr√°ficos Avan√ßados")
        
        # Gr√°fico de tend√™ncia
        if len(metricas['gastos_mensais']) > 1:
            fig_tendencia = criar_grafico_tendencia(metricas['gastos_mensais'])
            st.plotly_chart(fig_tendencia, use_container_width=True)
        
        # Gr√°fico de categoria ao longo do tempo
        fig_categoria_tempo = criar_grafico_categoria_tempo(df)
        st.plotly_chart(fig_categoria_tempo, use_container_width=True)
        
        # Gr√°fico de pizza das categorias
        if not metricas['gastos_por_categoria'].empty:
            fig_pizza = px.pie(
                values=metricas['gastos_por_categoria'].values,
                names=metricas['gastos_por_categoria'].index,
                title="Distribui√ß√£o de Gastos por Categoria"
            )
            st.plotly_chart(fig_pizza, use_container_width=True)
    
    with tab4:
        st.subheader("An√°lise Detalhada")
        
        # An√°lise de outliers
        if len(metricas['outliers']) > 0:
            st.warning(f"**Gastos An√¥malos Detectados ({len(metricas['outliers'])}):**")
            for estabelecimento, valor in metricas['outliers'].items():
                st.write(f"‚Ä¢ **{estabelecimento}:** R$ {valor:,.2f}")
        
        # An√°lise temporal detalhada
        if len(metricas['gastos_mensais']) > 1:
            st.subheader("An√°lise Mensal")
            
            df_mensal = pd.DataFrame({
                'M√™s': metricas['gastos_mensais'].index.astype(str),
                'Gastos': metricas['gastos_mensais'].values
            })
            
            # Calcular varia√ß√£o percentual
            df_mensal['Varia√ß√£o (%)'] = df_mensal['Gastos'].pct_change() * 100
            
            st.dataframe(df_mensal, use_container_width=True)
        
        # Estat√≠sticas por pagador
        if 'Pagador' in df.columns:
            st.subheader("An√°lise por Pagador")
            
            gastos_por_pagador = df[df['Tipo'] == 'Despesa'].groupby('Pagador')['Valor'].sum().abs()
            
            if not gastos_por_pagador.empty:
                fig_pagador = px.bar(
                    x=gastos_por_pagador.index,
                    y=gastos_por_pagador.values,
                    title="Gastos por Pagador"
                )
                st.plotly_chart(fig_pagador, use_container_width=True)
